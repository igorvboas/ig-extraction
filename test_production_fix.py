"""
Script para testar o fix de valida√ß√£o antes de fazer deploy
Executa testes b√°sicos para garantir que as mudan√ßas funcionam
"""
import sys
import importlib.util

def check_package_version(package_name, min_version=None):
    """Verifica se um pacote est√° instalado e opcionalmente checa a vers√£o m√≠nima"""
    try:
        spec = importlib.util.find_spec(package_name)
        if spec is None:
            print(f"‚ùå {package_name} n√£o est√° instalado")
            return False
        
        module = importlib.import_module(package_name)
        version = getattr(module, '__version__', 'unknown')
        
        if min_version and version != 'unknown':
            from packaging import version as pkg_version
            try:
                if pkg_version.parse(version) >= pkg_version.parse(min_version):
                    print(f"‚úÖ {package_name}=={version} (m√≠nimo: {min_version})")
                    return True
                else:
                    print(f"‚ö†Ô∏è  {package_name}=={version} (m√≠nimo necess√°rio: {min_version})")
                    return False
            except:
                # Se n√£o conseguir parsear, apenas avisa
                print(f"‚úÖ {package_name}=={version} (n√£o foi poss√≠vel comparar vers√£o)")
                return True
        else:
            print(f"‚úÖ {package_name}=={version}")
            return True
            
    except Exception as e:
        print(f"‚ùå Erro ao verificar {package_name}: {e}")
        return False

def test_imports():
    """Testa se todos os imports necess√°rios funcionam"""
    print("\nüîç Testando imports...")
    
    try:
        from app.services.extractor import InstagramExtractor
        from app.services.instagram_client import InstagramClient
        from pydantic import ValidationError
        print("‚úÖ Todos os imports funcionando")
        return True
    except Exception as e:
        print(f"‚ùå Erro nos imports: {e}")
        return False

def test_validation_error_handling():
    """Testa se o ValidationError est√° sendo capturado corretamente"""
    print("\nüß™ Testando tratamento de ValidationError...")
    
    try:
        from pydantic import ValidationError
        from app.services.extractor import InstagramExtractor
        
        # Verificar se o import est√° no c√≥digo
        import inspect
        source = inspect.getsource(InstagramExtractor.extract_posts)
        
        if 'ValidationError' in source and 'except ValidationError' in source:
            print("‚úÖ Tratamento de ValidationError encontrado no c√≥digo")
            return True
        else:
            print("‚ö†Ô∏è  Tratamento de ValidationError n√£o encontrado")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro ao testar ValidationError: {e}")
        return False

def main():
    print("=" * 60)
    print("üîß TESTE DE CORRE√á√ÉO DE PRODU√á√ÉO")
    print("=" * 60)
    
    # Lista de pacotes e vers√µes m√≠nimas esperadas
    packages = {
        'fastapi': '0.104.1',
        'uvicorn': '0.24.0',
        'instagrapi': '2.1.2',
        'pydantic': '2.5.0',
        'dotenv': '1.0.0',
        'pandas': '2.1.3'
    }
    
    print("\nüì¶ Verificando vers√µes dos pacotes:")
    print("-" * 60)
    
    all_ok = True
    for package, expected_version in packages.items():
        # Alguns pacotes t√™m nomes diferentes no import
        import_name = 'dotenv' if package == 'dotenv' else package
        if not check_package_version(import_name, expected_version):
            all_ok = False
    
    # Testar imports
    if not test_imports():
        all_ok = False
    
    # Testar tratamento de erros
    if not test_validation_error_handling():
        all_ok = False
    
    print("\n" + "=" * 60)
    if all_ok:
        print("‚úÖ TODOS OS TESTES PASSARAM!")
        print("=" * 60)
        print("\nüöÄ Voc√™ pode fazer deploy com seguran√ßa!")
        print("\nPr√≥ximos passos:")
        print("1. git add -A")
        print("2. git commit -m 'fix: Corrigir erro de valida√ß√£o em produ√ß√£o'")
        print("3. git push origin main")
        print("4. Seguir instru√ß√µes em DEPLOY_FIX.md")
        return 0
    else:
        print("‚ùå ALGUNS TESTES FALHARAM")
        print("=" * 60)
        print("\n‚ö†Ô∏è  Corrija os problemas antes de fazer deploy!")
        print("\nPara instalar vers√µes corretas:")
        print("pip install -r requirements.txt --upgrade")
        return 1

if __name__ == "__main__":
    sys.exit(main())

